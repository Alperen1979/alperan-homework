\\from 1 to 3 \\
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

struct Node {
    int data;
    struct Node* next;
};

typedef struct Node Node;

Node* createNode(int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

void addToEnd(Node** head, int data) {
    Node* newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
        return;
    }
    Node* temp = *head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newNode;
}

void addToStart(Node** head, int data) {
    Node* newNode = createNode(data);
    newNode->next = *head;
    *head = newNode;
}

void printList(Node* head) {
    Node* current = head;
    while (current != NULL) {
        printf("%d", current->data);
        if (current->next != NULL) {
            printf("->");
        }
        current = current->next;
    }
    printf("\n");
}

void addNumbersToList(Node** head) {
    int num;
    do {
        printf("Enter a number (-1 to stop): ");
        scanf("%d", &num);
        if (num != -1) {
            if (num % 2 == 0) {
                addToEnd(head, num);
            } else {
                addToStart(head, num);
            }
        }
    } while (num != -1);
}

void generateRandomNumbers(Node** head, int count) {
    srand(time(NULL));
    for (int i = 0; i < count; i++) {
        int num = rand() % 100 + 1;
        addToEnd(head, num);
    }
}

void sortList(Node** head) {
    if (*head == NULL || (*head)->next == NULL) {
        return;
    }

    Node* current = *head;
    Node* nextNode = current->next;
    *head = NULL;

    while (current != NULL) {
        nextNode = current->next;
        if (*head == NULL || current->data > (*head)->data) {
            current->next = *head;
            *head = current;
        } else {
            Node* temp = *head;
            while (temp->next != NULL && temp->next->data > current->data) {
                temp = temp->next;
            }
            current->next = temp->next;
            temp->next = current;
        }
        current = nextNode;
    }
}

int main() {
    Node* list = NULL;

    // Task 1
    addNumbersToList(&list);

    // Task 2
    generateRandomNumbers(&list, 100);

    // Task 3
    sortList(&list);

    // Print the list
    printList(list);

    // Free the memory
    while (list != NULL) {
        Node* temp = list;
        list = list->next;
        free(temp);
    }

    return 0;
}
